Para abordar el problema partí revisando bien los códigos, intenté correr el contenedor pero me surgieron errores por lo que al investigar descubrí que era por los archivos .env, había que cambiar las ip 127.0.0.1 a localhost que, si bien son practicamente lo mismo, no me estaba leyendo bien los datos así que no ejecutaba nada. Además cambiar en index.js la importación de react-dom a react-dom/client y en userList.js cambiar la tabla de class a className (por algún motivo también tiraba error).
Posteriormente no supe como continuar y me perdí, por lo que nos juntamos entre algunos compañeros para ver como abordar la situación. En esta reunión compartimos entre todos lo que pensábamos sobre como proceder, y con ello partí por crear el botón en el front. Este botón está programado para llamar a la función getReportData y luego muestra esta información en un modal.
La función getReportDdata está implementada en check.controller.js, comienza obteniendo el RUT del usuario desde los parámetros de la solicitud. Luego, busca en la base de datos todas las marcaciones de asistencia que corresponden a ese RUT.
Si ocurre un error durante la búsqueda, la función responde con un estado HTTP 500 y envía un mensaje con el error. Si la búsqueda es exitosa, se procede a calcular los datos del informe.
Se crea un objeto reportData para almacenar los datos del informe, que incluyen el número de días trabajados, el número de días trabajados menos de ocho horas y el número de horas extras trabajadas.
Luego, se agrupan las marcaciones de asistencia por fecha. Para cada marcación, se obtiene solo la fecha (sin la hora) y se usa como clave en el objeto checksByDate. Si no existe una entrada para esa fecha, se crea una nueva lista. La marcación se añade a la lista correspondiente a su fecha.
A continuación, se calculan los datos del informe. Para cadda fecha en checksByDate, se incrementa el contador de días trabajados en reportData. Las marcaciones de esa fecha se ordenan por hora.
Se calcula la cantidad total de horas trabajadas en el día sumando las horas entre cada par de marcaciones (entrada y salida). Si el total de horas es menor a ocho, se incrementa el contador de días trabajados menos de ocho horas. Si es mayor a ocho, se suman las horas extras al contador de horas extras trabajadas.
Finalmente, se crea un array reportDataArray con los datos del informe y se envía como respuesta con un estado HTTP 200. Cada entrada del array es un objeto con el nombre y el valor de un dato del informe.
Después de implementar la función getReportData en check.controller.js, necesitaba una forma de exponer esta función al cliente. Para hacer esto, en server.js, ddefiní una ruta de Express.js que maneja las solicitudes GET a “/check/report/:rut”. Cuando el servidor recibe una solicitud en esta ruta, se invoca la función getReportData. Esta función toma el RUT del usuario desde los parámetros de la solicitud, busca en la base de datos todas las marcaciones de asistencia que corresponden a ese RUT, calcula los datos del informe y envía estos datos como respuesta.
Por otro laddo, en el lado del cliente, necesitaba una forma de hacer solicitudes al servidor para obtener los datos del informe. Para hacer esto, en check.service.js, implementé una función getReportData que hace una solicitud GET a la ruta “/check/report/:rut” en el servidor. Esta función toma un RUT como argumento, lo inserta en la ruta y envía la solicitud. Cuando se recibe la respuesta del serviddor, la función devuelve los datos de la respuesta.